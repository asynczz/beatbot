import telebot
from telebot import types
from keyboa import Keyboa # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from os import listdir, remove, path
from yookassa import Configuration,Payment # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
import asyncio # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
import config
import launch
import make_beat # –¢—É—Ç —Å–æ–∑–¥–∞—é—Ç—Å—è –±–∏—Ç—ã
import db_handler # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
from pydub import AudioSegment # –î–ª—è –æ–±—Ä–µ–∑–∫–∏ –±–∏—Ç–æ–≤ –Ω–∞ –∏—Ö –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏
from glob import glob
import itertools
import json

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Æ–∫–∞—Å—Å—ã
Configuration.account_id = config.SHOP_ID
Configuration.secret_key = config.SHOP_API_TOKEN

# –ö–ª—é—á–∏ - –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö, –∑–Ω–∞—á–µ–Ω–∏—è - –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ style_*
aliases = {
    'Jersey Club': 'JC',
    'Trap': 'Trap',
    'Drill': 'Drill',
    'Plug': 'Plug',
}

styles_buttons = []
for key in aliases.keys():
    styles_buttons.append(key)

beat_price = 90 # RUB

# –ö–Ω–æ–ø–∫–∏ 
menu_buttons = ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üè° –û –Ω–∞—Å', f'üéµ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ç - {beat_price}‚ÇΩ üéµ']
balance_buttons = ['90‚ÇΩ', '180‚ÇΩ', '360‚ÇΩ']
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ bpm
bpm_buttons = {'Jersey Club': ['140bpm', '150bpm', '160bpm'],
               'Trap': ['110bpm', '130bpm', '145bpm'],
               'Drill': ['110bpm', '130bpm', '145bpm'],
               'Plug': ['140bpm', '150bpm', '160bpm']}

# –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î
start_balance = 0 # RUB
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î –Ω–∞ add_user
is_added = {}
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç id menu —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î –Ω–∞ get_menu_id
menu_id = {}

if launch.mailing_list is not None:
    for chat_id in launch.mailing_list:
        inline_markup = Keyboa(items=menu_buttons[2], items_in_row=1)
        bot.send_message(chat_id, '–°–æ–∂–∞–ª–µ—é, –Ω–æ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–≤–æ–∏—Ö –±–∏—Ç–æ–≤ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è üòµ‚Äçüí´\n\n–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –î–µ–Ω—å–≥–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ —Å–Ω—è—Ç—ã.\n\n–¢—ã –º–æ–∂—à–µ—å –∑–∞–∫–∞–∑–∞—Ç—å –±–∏—Ç –µ—â–µ —Ä–∞–∑ üëâ', reply_markup=inline_markup())

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ üéß –±–∏—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö.\n\n–ú–æ—è –≥–ª–∞–≤–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å - –¥–æ—Å—Ç—É–ø–Ω–∞—è üí∞ —Ü–µ–Ω–∞ –∏ –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–∏—Ç.\n\n–ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ –∏ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ —Ñ–æ–Ω–µ –¥—Ä—É–≥–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π! üé∂\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É\n/menu')
    user_initials = f'{message.from_user.first_name} {message.from_user.last_name}'

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
    if is_added.get(message.chat.id) is None:
        is_added[message.chat.id] = True
        db_handler.add_user(message.chat.username, message.chat.id, user_initials, start_balance)
    
@bot.message_handler(commands=['menu'])
def menu(message):
    inline_markup = Keyboa(items=menu_buttons, items_in_row=2)

    bot.send_message(message.chat.id, "üé∂ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞ –±–∏—Ç–æ–≤ üé∂\n\nüí• –¢—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –±–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —è –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /example_beats. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à –ø—Ä–∏–º–µ—Ä.\n\nüéµ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –±–∏—Ç' –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å\n\nüëâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=inline_markup())

    # –î–æ–±–∞–≤–∏—Ç—å id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    menu_id[message.chat.id] = message.message_id
    db_handler.set_menu_id(message.chat.id, message.message_id)

    user_initials = f'{message.from_user.first_name} {message.from_user.last_name}'

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
    if is_added.get(message.chat.id) is None:
        is_added[message.chat.id] = True
        db_handler.add_user(message.chat.username, message.chat.id, user_initials, start_balance)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã –±–∏—Ç–æ–≤, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥ –∫–ª—é—á–µ–º –µ–≥–æ chat_id –±—É–¥–µ—Ç True
got_example_beats = {}

@bot.message_handler(commands=['example_beats'])
def example(message):
    if got_example_beats.get(message.chat.id) is None:
        bot.send_message(message.chat.id, "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –±–∏—Ç–æ–≤ üíæ\n–ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è, –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —Ç–∞–∫–∏–µ –∂–µ –∏ —Ç–µ–±–µ!")
        for file_path in glob('example_beats/*.wav'):
            example_beat = open(file_path, 'rb')
            bot.send_audio(message.chat.id, example_beat)
            example_beat.close()
        got_example_beats[message.chat.id] = True
    else:
        inline_markup = Keyboa(items=menu_buttons[2], items_in_row=1)
        bot.send_message(message.chat.id, "–¢–µ–±–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –±–∏—Ç–æ–≤ üòµ‚Äçüí´\n\n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë, –±–æ—Ç –º–æ–∂–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏—Ç üòâ", reply_markup=inline_markup())
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î –Ω–∞ get_user
user = {}
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î –Ω–∞ get_processing
processing = {}
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î –Ω–∞ get_beats_generating
beats_generating = {}
# user_id: call.data (style)
user_chosen_style = {}
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–µ–º–æ-–≤–µ—Ä—Å–∏–π
beats = launch.beats
# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏—Ç–æ–≤
beats_buttons = [str(i) for i in range(1, beats+1)]
# –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è message_id, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. chat_id: msg.message_id
balance_messages = {}
# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. chat_id: msg
message_to_delete = {}

# # –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç—ë–∂
# def payment(value,description):
# 	payment = Payment.create({
#     "amount": {
#         "value": value,
#         "currency": "RUB"
#     },
#     "payment_method_data": {
#         "type": "bank_card"
#     },
#     "confirmation": {
#         "type": "redirect",
#         "return_url": "https://web.telegram.org/k/#@NeuralBeatBot"
#     },
#     "capture": True,
#     "description": description
# 	})

# 	return json.loads(payment.json())

# # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ "—Ç–æ–≤–∞—Ä–∞"
# @bot.pre_checkout_query_handler(func=lambda query: True)
# def process_pre_checkout_query(pre_checkout_query):
#     bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True, error_message=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handler(call):
    global msg
    global beats
    global beats_buttons
    global balance_messages

    # # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    # async def check_payment(payment_id):
    #     payment = json.loads((Payment.find_one(payment_id)).json())
    #     while payment['status'] == 'pending':
    #         payment = json.loads((Payment.find_one(payment_id)).json())
    #         await asyncio.sleep(3)

    #     if payment['status']=='succeeded':
    #         print("SUCCSESS RETURN")
    #         db_handler.top_balance(call.message.chat.id, call.data.split('‚ÇΩ')[0])
    #         bot.send_message(call.message.chat.id, f'ü§ë –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {call.data}').message_id
    #         if call.message.chat.id in balance_messages: 
    #             balance_markup = Keyboa(items=balance_buttons, items_in_row=3)
    #             balance = db_handler.get_balance(call.message.chat.id)
    #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=balance_messages[call.message.chat.id], text=f'üè¶ –ù–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ {balance}‚ÇΩ\n\nüëâ –í—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=balance_markup())
    #         return True
    #     else:
    #         print("BAD RETURN")
    #         bot.send_message(call.message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.')
    #         return False

    # –ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ë–î –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if user.get(call.message.chat.id) is None:
        if db_handler.get_user(call.message.chat.id) == False:
            bot.send_message(call.message.chat.id, '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start')
            return
        else:
            user[call.message.chat.id] = db_handler.get_user(call.message.chat.id)
    else:
        if user[call.message.chat.id] == False:
            bot.send_message(call.message.chat.id, '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start')
            return

    if call.data in menu_buttons:
        try:
            if call.message:
                if call.data == f'üéµ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ç - {beat_price}‚ÇΩ üéµ':
                    if (beats_generating.get(call.message.chat.id) is not None and beats_generating.get(call.message.chat.id) == False) or db_handler.get_beats_generating(call.message.chat.id) == 0:
                        if processing.get(call.message.chat.id) is not None or db_handler.get_processing(call.message.chat.id) == 0:
                            db_handler.set_processing(call.message.chat.id)
                            processing[call.message.chat.id] = True

                            styles_markup = Keyboa(items=styles_buttons, items_in_row=2)
                            message_to_delete[call.message.chat.id] = bot.send_message(call.message.chat.id, 'üî• –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –±–∏—Ç:', reply_markup=styles_markup()).message_id

                            db_handler.del_processing(call.message.chat.id)
                            processing[call.message.chat.id] = False
                    else:
                        if (processing.get(call.message.chat.id) is not None and processing.get(call.message.chat.id) == False) or db_handler.get_processing(call.message.chat.id) == 0:
                            for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'):
                                if path.isfile(file):
                                    pass
                                else:
                                    inline_markup = Keyboa(items=menu_buttons[2], items_in_row=1)
                                    bot.send_message(call.message.chat.id, f"üîÑ –¢–≤–æ–∏ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–∏—Ç–æ–≤ –ø–æ –ø—Ä–æ—à–ª–æ–º—É –∑–∞–ø—Ä–æ—Å—É —É–∂–µ —É–¥–∞–ª–∏–ª–∏—Å—å.\n\n–ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –±–∏—Ç—ã –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâ", reply_markup=inline_markup())
                                    # –£–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ "–æ–±—Ä–∞–±–æ—Ç–∫–∏"
                                    db_handler.del_processing(call.message.chat.id)
                                    processing[call.message.chat.id] = False
                                    db_handler.del_beats_generating(call.message.chat.id)
                                    beats_generating[call.message.chat.id] = False
                                    return
                            bot.send_message(call.message.chat.id, '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –±–∏—Ç –≤–æ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞. –í—ã–±–µ—Ä–∏ –≤–µ—Ä—Å–∏—é –±–∏—Ç–∞ –∏ –¥–æ–∂–¥–∏—Å—å –µ—ë –æ—Ç–ø—Ä–∞–≤–∫–∏.')
                        else:
                            bot.send_message(call.message.chat.id, '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –±–∏—Ç –≤–æ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞.')    
                elif call.data == 'üí∞ –ë–∞–ª–∞–Ω—Å':
                    balance_markup = Keyboa(items=balance_buttons, items_in_row=3)
                    # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
                    balance = db_handler.get_balance(call.message.chat.id) 
                    balance_messages[call.message.chat.id] = bot.send_message(call.message.chat.id, f'üè¶ –ù–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ {balance}‚ÇΩ\n\nüõë–ù–ê –î–ê–ù–ù–´–ô –ú–û–ú–ï–ù–¢ –û–ü–õ–ê–¢–ê –†–ê–ë–û–¢–ê–ï–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï üõë –†–∞–±–æ—á–∞—è –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–∞—Å—Å—ã.\n\nüëâ –í—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=balance_markup()).message_id
                elif call.data == 'üè° –û –Ω–∞—Å':
                    bot.send_message(call.message.chat.id, 'üìå–£—Å–ª—É–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n\n–ò–ù–ù: 910821614530\nüë§–°—ã—á—ë–≤ –ï–≥–æ—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n\n‚úâÔ∏è–ü–æ—á—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏:\ntech.beatbot@mail.ru\n\nüìû–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:\n+79781055722\n\nüåç–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:\nhttps://beatmaker.site')   
        except Exception as e:
            print(repr(e))
            db_handler.del_processing(call.message.chat.id)
        return
    elif call.data in balance_buttons:
        try:
            if call.message:
                # # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ callback_data
                # price = int(call.data.split('‚ÇΩ')[0])
                # # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                # payment_data = payment(price, f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {price}‚ÇΩ')
                # payment_id = payment_data['id']
                # confirmation_url = payment_data['confirmation']['confirmation_url']
                # # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é pytelegrambotapi
                # btn = types.InlineKeyboardButton(f'–û–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ', url=confirmation_url)
                # # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
                # keyboard = types.InlineKeyboardMarkup()
                # keyboard.add(btn)
                # bot.send_message(call.message.chat.id, f'üí≥ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ', reply_markup=keyboard)
                # asyncio.run(check_payment(payment_id))
                print("SUCCSESS RETURN")
                db_handler.top_balance(call.message.chat.id, call.data.split('‚ÇΩ')[0])
                bot.send_message(call.message.chat.id, f'ü§ë –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {call.data}').message_id
                if call.message.chat.id in balance_messages: 
                    balance_markup = Keyboa(items=balance_buttons, items_in_row=3)
                    balance = db_handler.get_balance(call.message.chat.id)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=balance_messages[call.message.chat.id], text=f'üè¶ –ù–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ {balance}‚ÇΩ\n\nüõë–ù–ê –î–ê–ù–ù–´–ô –ú–û–ú–ï–ù–¢ –û–ü–õ–ê–¢–ê –†–ê–ë–û–¢–ê–ï–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï üõë –†–∞–±–æ—á–∞—è –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–∞—Å—Å—ã.\n\n–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=balance_markup())

        except Exception as e:
            print(repr(e))
        return
    elif call.data in styles_buttons:
        try:
            if call.message:
                if processing.get(call.message.chat.id) is not None or db_handler.get_processing(call.message.chat.id) == 0:
                    db_handler.set_processing(call.message.chat.id)
                    processing[call.message.chat.id] = True

                    if message_to_delete.get(call.message.chat.id) is not None:
                        bot.delete_message(call.message.chat.id, message_to_delete[call.message.chat.id])
                        del message_to_delete[call.message.chat.id]

                    bpm_markup = Keyboa(items=bpm_buttons[call.data], items_in_row=3)
                    message_to_delete[call.message.chat.id] = bot.send_message(call.message.chat.id, f'{call.data} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–µ–º–ø:', reply_markup=bpm_markup()).message_id 
                    
                    db_handler.set_chosen_style(call.message.chat.id, call.data)
                    user_chosen_style[call.message.chat.id] = call.data

                    db_handler.del_processing(call.message.chat.id)
                    processing[call.message.chat.id] = False

        except Exception as e:
            print(repr(e))
            db_handler.del_processing(call.message.chat.id)
        return
    elif call.data in list(itertools.chain(*bpm_buttons.values())):
        try:
            if call.message:
                if processing.get(call.message.chat.id) is not None or db_handler.get_processing(call.message.chat.id) == 0:
                    if user_chosen_style.get(call.message.chat.id) is not None:
                        if call.data not in bpm_buttons[user_chosen_style[call.message.chat.id]]:
                            bot.send_message(call.message.chat.id, '‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç bpm –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è, –≤—ã–±–µ—Ä–∏ –∏–∑ –≤—ã—à–µ–ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö')
                            return
                    else:
                        if call.data not in bpm_buttons[db_handler.get_chosen_style[call.message.chat.id]]:
                            bot.send_message(call.message.chat.id, '‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç bpm –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è, –≤—ã–±–µ—Ä–∏ –∏–∑ –≤—ã—à–µ–ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö')
                            return
                        
                    db_handler.set_processing(call.message.chat.id)
                    processing[call.message.chat.id] = True
                    if db_handler.get_balance(call.message.chat.id) >= beat_price:

                        db_handler.set_beats_generating(call.message.chat.id)
                        beats_generating[call.message.chat.id] = True

                        if message_to_delete.get(call.message.chat.id) is not None:
                            bot.delete_message(call.message.chat.id, message_to_delete[call.message.chat.id])
                            del message_to_delete[call.message.chat.id]

                        message_to_delete[call.message.chat.id] = bot.send_message(call.message.chat.id, '–°–æ–∑–¥–∞—é –≤–µ—Ä—Å–∏–∏ –±–∏—Ç–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...').message_id
                        
                        # style - —Å—Ç–∏–ª—å –±–∏—Ç–∞, num - —Å–∫–æ–ª—å–∫–æ –±–∏—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å
                        def generate_beats(style, num):
                            for i in range(1, num+1):
                                if style == 'Jersey Club':
                                    status = make_beat.jersey_club(call.message.chat.id, call.data, i)
                                elif style == 'Trap':
                                    status = make_beat.trap(call.message.chat.id, call.data, i)
                                elif style == 'Drill':
                                    status = make_beat.drill(call.message.chat.id, call.data, i)
                                elif style == 'Plug':
                                    status = make_beat.plug(call.message.chat.id, call.data, i)
                            if status:
                                return True
                            else:
                                return False   
                        # –û–±—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ
                        def trimmed_audio(files_list):
                            for file_path in files_list:
                                sound = AudioSegment.from_wav(file_path)
                                trimmed = sound[45000:55000]
                                new_file_path = f"{path.splitext(file_path)[0]}_short.wav"
                                trimmed_sound = trimmed.export(new_file_path, format="wav")
                                if files_list.index(file_path) == len(files_list)-1:           
                                    beats_markup = Keyboa(items=beats_buttons, items_in_row=3)   
                                    bot.send_audio(call.message.chat.id, trimmed_sound, reply_markup=beats_markup())
                                    return
                                else:
                                    bot.send_audio(call.message.chat.id, trimmed_sound)
                            
                        # –°–¥–µ–ª–∞—Ç—å –±–∏—Ç     
                        if generate_beats(db_handler.get_chosen_style(call.message.chat.id), beats) == False:
                            db_handler.del_processing(call.message.chat.id)
                            db_handler.del_beats_generating(call.message.chat.id)
                            # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã
                            for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'):
                                remove(file)
                            return bot.send_message(call.message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–∏—Ç–æ–≤, –¥–µ–Ω—å–≥–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ —Å–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

                        if message_to_delete.get(call.message.chat.id) is not None:
                            bot.delete_message(call.message.chat.id, message_to_delete[call.message.chat.id])
                            del message_to_delete[call.message.chat.id]
                        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∏—Ç
                        message_to_delete[call.message.chat.id] = bot.send_message(call.message.chat.id, f'–í–æ—Ç 3 –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –±–∏—Ç–æ–≤ –Ω–∞ —Ç–≤–æ–π –≤–∫—É—Å: {db_handler.get_chosen_style(call.message.chat.id)}').message_id

                        trimmed_audio(glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'))

                        for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}]_short.wav'):         
                            remove(file)

                    else:    
                        inline_markup = Keyboa(items=menu_buttons[0], items_in_row=1)
                        bot.send_message(call.message.chat.id, f'‚ö†Ô∏è –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏—Ç', reply_markup=inline_markup())
                        db_handler.del_beats_generating(call.message.chat.id)
                        beats_generating[call.message.chat.id] = False
                    db_handler.del_processing(call.message.chat.id)
                    processing[call.message.chat.id] = False
        except Exception as e:
            print(repr(e))
            db_handler.del_processing(call.message.chat.id)
            db_handler.del_beats_generating(call.message.chat.id)
            bot.send_message(call.message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–∏—Ç–æ–≤, –¥–µ–Ω—å–≥–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ —Å–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
            # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã
            for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'):
                remove(file)
        return
    elif call.data in beats_buttons:
        try:
            if call.message:
                if (processing.get(call.message.chat.id) is not None or db_handler.get_processing(call.message.chat.id) == 0) and (beats_generating.get(call.message.chat.id) is not None or db_handler.get_beats_generating(call.message.chat.id) != 0):
                    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–æ–±—Ä–∞–±–æ—Ç–∫—É"
                    db_handler.set_processing(call.message.chat.id)
                    processing[call.message.chat.id] = True

                    bot.send_message(call.message.chat.id, f'–¢–≤–æ–π –≤—ã–±–æ—Ä: {call.data}')
                    
                    if call.data in beats_buttons:
                        
                        message_to_delete[call.message.chat.id] = bot.send_message(call.message.chat.id, '–°–∫–∏–¥—ã–≤–∞—é –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é...').message_id

                        # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                        beat = open(f'output_beats/{call.message.chat.id}_{call.data}.wav', 'rb')

                        # –°–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª
                        bot.send_audio(call.message.chat.id, beat)
                        bot.send_message(call.message.chat.id, f'–° —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ {beat_price}‚ÇΩ\n–ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –±–∏—Çüòâ')
                        
                        if message_to_delete.get(call.message.chat.id) is not None:
                            bot.delete_message(call.message.chat.id, message_to_delete[call.message.chat.id])
                            del message_to_delete[call.message.chat.id]

                        # –ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                        beat.close()
                        
                        # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã
                        for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'):
                            remove(file)

                    elif call.data == '–ù–∏–∫–∞–∫–æ–π':   
                        bot.send_message(call.message.chat.id, f'–ù–µ –æ–¥–Ω–æ–≥–æ –±–∏—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–æ–º—Ç—Ä–µ—Ç—å –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.')
                        # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã
                        for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'):
                            remove(file)

                    # –£–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ "–æ–±—Ä–∞–±–æ—Ç–∫–∏"
                    db_handler.del_processing(call.message.chat.id)
                    processing[call.message.chat.id] = False
                    db_handler.del_beats_generating(call.message.chat.id)
                    beats_generating[call.message.chat.id] = False

                    # –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏
                    db_handler.pay(call.message.chat.id, beat_price)

                    # –£–≤–µ–ª–∏—á–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω—ã—Ö –±–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ
                    db_handler.get_beat(call.message.chat.id)
                    
        except Exception as e:
            print(repr(e))
            db_handler.del_processing(call.message.chat.id)
            db_handler.del_beats_generating(call.message.chat.id)
            # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã
            for file in glob(f'output_beats/{call.message.chat.id}_[1-{beats}].wav'):
                remove(file)
            bot.send_message(call.message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∏—Ç, –¥–µ–Ω—å–≥–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ —Å–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

bot.polling()